// const CORS = "https://cors-anywhere.herokuapp.com/"
// sessionStorage.clear()

// window._config = {
//   cognito: {
//     userPoolId: "us-east-1_InedFezwr",
//     regio  "us-east-1",
//     clientId: "2g2q4svd2pg3lro7jv9ae5q59h",
//   },
// }

// let poolData = {
//   UserPoolId: _config.cognito.userPoolId,
//   ClientId: _config.cognito.clientId,
// }

const CORS = "";
const ENDPOINT = "https://api.ahmedalnajjar.com/dev";

const bootstrapCDN = `<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css">`;
const style = `<style>
                @media print {
                  .sticky-footer {
                      positio  fixed 
                      bottom: 0 
                  }
                }
              </style>`;

function successToast(message) {
  $.toast({
    icon: "success",
    text: `<p class='p-3'>${message}</p>`,
    delay: "3000",
    position: "top-right",
    dismissible: false,
  });
}

function warningToast(message) {
  $.toast({
    icon: "warning",
    text: `<p class='p-3'>${message}</p>`,
    delay: "3000",
    position: "top-right",
    dismissible: false,
  });
}

function dangerToast(message) {
  $.toast({
    icon: "danger",
    text: `<p class='p-3'>${message}</p>`,
    delay: "3000",
    position: "top-right",
    dismissible: false,
  });
}

$(document).on("click", ".action, a", function (e) {
  var action = $(this).data("action");
  // console.log("action - ", action);

  if (action === "profile") {
    getResponse(
      "/admin/users",
      { filter_name: "sub", filter_value: $(this).data("pid") },
      userProfileModal
    );
  }

  if (action === "update-profile") {
    console.log("sub", $(this).data("pid"));
    console.log("email", $(this).data("ptEmail"));
    updateUserProfile($(this).data("pid"), $(this).data("ptEmail"));
  }

  if (action === "confirm") {
    confirmAppointment(
      $(this).data("eid"),
      $(this).data("pid"),
      $(this).data("ptEmail"),
      $(this).data("docMail")
    );
  }

  if (action === "invoice") {
    showInvoice($(this).data("oid"));
  }

  if (action === "reschedule") {
    rescheduleAppointment($(this).data("eid"));
  }

  if (action === "forms") {
    console.log("submit form");
    submitForms(this);
  }

  if (action === "pt-dashboard") {
    openPatientDashboard($(this).data("pid"), $(this).data("eid"));
  }

  if (action === "pt-dashboard-section") {
    ptDashboardInit();
  }

  if (action === "visit-details-section") {
    ptVisitDetailsSection();
  }

  if (action === "view-visit-details") {
    ptShowVisitDetails($(this).data("formType"), $(this).data("created"));
  }

  if (action === "user-reports-section") {
    ptUserReportsSection();
  }

  if (action === "view-user-report") {
    ptShowUserReport($(this).data("created"));
  }

  if (action === "forms-section") {
    ptViewFormsSection();
  }

  if (action === "view-form") {
    let form_type = $(this).data("formType");
    let created = $(this).data("created");
    ptShowForm(form_type, created);
  }

  if (action === "treatment-plan-section") {
    ptShowTreatmentPlanSection(null);
  }

  if (action === "invoice-section") {
    ptShowInvoiceSection();
  }

  if (action === "view-invoice") {
    ptShowInvoice($(this).data("created"));
  }

  if (action === "submit-invoice") {
    console.log("submit invoice");
    submitInvoice(this);
  }
});

function ptShowTreatmentPlanSection(version) {
  $(".sections").addClass("d-none");
  $(".sections.view-treatment-plan").removeClass("d-none");
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    {
      // email: sessionStorage.getItem("pt-email"),
      form_type: "treatment_plan",
      v: version || 0,
    },
    (res) => {
      $("#patient-treatment-plan-tables").html("");
      if (res.statusCode == 200 && res.body.Count > 0) {
        let formData = res.body.Items[0].form_data;
        let no_of_sessions = res.body.Items[0].form_data.sessions.length;
        console.log(no_of_sessions);
        for (i = 0; i < no_of_sessions; i++) {
          addPatientTreatmentTable();
        }
        js2form("forms", formData);
      }
      addPatientTreatmentTable();
    }
  );
}

function submitForms(obj) {
  var formData = form2js("forms", ".", true, processFormData);
  if (
    formData.phone_number != null
    //  && formData.form_type != "treatment_plan"
  ) {
    formData.phone_number =
      "+" +
      $(".tel-phone-input").intlTelInput("getSelectedCountryData").dialCode +
      formData.phone_number;
  }
  formData.email = sessionStorage.getItem("pt-email");
  console.log(formData);
  postResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    formData,
    (res) => {
      console.log(res);
      successToast("Successful");
      if (formData.form_type == "treatment_plan") {
        ptShowTreatmentPlanSection(0);
      }
    }
  );
}

function ptShowUserReport(created) {
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/checklist`,
    {
      email: sessionStorage.getItem("pt-email"),
      created: created,
    },
    (data) => {
      // console.log("checklist data -", JSON.stringify(data, null, 2));
      if (data.statusCode == 200) {
        console.log("success ");
        drawChart(data.body.Items[0].survey);
      }
    }
  );
}

function ptUserReportsSection() {
  $(".sections").addClass("d-none");
  $(".sections.view-user-reports").removeClass("d-none");
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/checklist`,
    {
      email: sessionStorage.getItem("pt-email"),
    },
    (data) => {
      $("#user-report-list").html("");
      data.body.Items.forEach((item) => {
        $(`<li class="previous-records action" data-action="view-user-report" data-created="${
          item.created
        }">
              <span>${moment(item.created).format("LLL")}</span>
            </li>`).appendTo("#user-report-list");
      });
    }
  );
}
function ptShowInvoiceSection() {
  $(".sections").addClass("d-none");
  $(".sections.view-invoice").removeClass("d-none");
  newInvoice();
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/invoice`,
    {
      email: sessionStorage.getItem("pt-email"),
    },
    (data) => {
      $("#invoice-list").html("");
      data.body.Items.forEach((item) => {
        $(`<li class="previous-records action" data-action="view-invoice" data-created="${
          item.created
        }">
              <span>${moment(item.created).format("LLL")}</span>
            </li>`).appendTo("#invoice-list");
      });
    }
  );
}
function newInvoice() {
  $("#invoice").trigger("reset");
  $("#invoice")
    .find("input,select")
    .each(function () {
      $(this).removeClass("input-no-edit");
    });
  $(".sign-wrapper").css("display", "block");
  $("#receiver-signature").remove();
  $("#customer-signature").remove();
  $(".sections.view-invoice")
    .find('input[name="invoice_no"]')
    .addClass("input-no-edit")
    .val(new Date().getTime());
  $("#invoice").find("input[name=name]")[0].value = sessionStorage
    .getItem("pt-fullname")
    .replace(/\s\s+/g, " ");
  $("#invoice").find(
    "input[name=date]"
  )[0].value = `${new Date().getFullYear()}-${new Date().getMonth()}-${new Date().getDate()}`;
}

function ptShowInvoice(created) {
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/invoice`,
    {
      email: sessionStorage.getItem("pt-email"),
      created: created,
    },
    (data) => {
      if (data.statusCode == 200) {
        console.log("success ");
        // console.log("invoice data -", JSON.stringify(data, null, 2));
        let invoiceData = data.body.Items[0].invoice_data;
        js2form("invoice", invoiceData);
        $(".sections.view-invoice")
          .find("input,select")
          .addClass("input-no-edit");
        $(".consultation-type").css("display", "block");
        $(".sign-wrapper").css("display", "none");
        if (invoiceData.hasOwnProperty("receiver_signature")) {
          $(
            `<img id="receiver-signature" src="${invoiceData.receiver_signature}" class="img-fluid eids"/>`
          ).appendTo("#invoice label:contains('Receiver Signature')")[0];
        }

        if (invoiceData.hasOwnProperty("customer_signature")) {
          $(
            `<img id="customer-signature" src="${invoiceData.customer_signature}" class="img-fluid eids"/>`
          ).appendTo("#invoice label:contains('Customer Signature')")[0];
        }
      }
    }
  );
}

function ptShowVisitDetails(form_type, created) {
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    {
      email: sessionStorage.getItem("pt-email"),
      form_type: form_type,
      created: created,
    },
    (data) => {
      let form_data = data.body.Items[0].form_data;
      $("#visit-detail-iframe").css("display", "none");
      $("#visit-detail").css("display", "block");
      $("#visit-detail").html(ptRenderForm(data));
      // let url = "../forms/visit-report-form.html"
      // $.ajax({
      //   url: url,
      //   async: true,
      //   success: function (data) {
      //     $("#visit-detail-iframe").css("display", "none")
      //     $("#visit-detail").html(regexGetBodyContent(data))
      //     js2form("forms", formData)
      //   },
      // })
    }
  );
}

function submitInvoice(obj) {
  console.log(obj);
  var formData = form2js("invoice", ".", true, processFormData);

  formData.email = sessionStorage.getItem("pt-email");
  formData.userid = sessionStorage.getItem("pid");
  console.log("invoice ", formData);
  postResponse(`/admin/invoice`, formData, (res) => {
    console.log(res);
    successToast("Successful");
  });
}

function ptVisitDetailsSection() {
  $("#visit-detail-iframe").css("display", "block");
  $("#visit-detail").css("display", "none");

  $(".sections").addClass("d-none");
  $(".sections.view-visit-details").removeClass("d-none");
  $("#visit-detail-iframe").attr("src", "../forms/visit-report-form.html");
  $("#visit-detail-iframe").iFrameResize();
  /**
   * list visit forms
   */
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    {
      email: sessionStorage.getItem("pt-email"),
      form_type: "visit_report_form",
    },
    (data) => {
      $("#visit-details-list").html("");
      data.body.Items.forEach((item) => {
        $(`<li class="previous-records action" data-action="view-visit-details" data-form-type='${
          item.form_type
        }' data-created="${item.created}">
          <span>${moment(item.created).format("LLL")}</span>
        </li>`).appendTo("#visit-details-list");
      });
    }
  );
}

function renderFilledDetails(form_data) {
  let html = "";
  delete form_data.email;
  delete form_data.form_type;
  for (const [key, value] of Object.entries(form_data)) {
    if (key.includes("file")) {
    } else if (key.includes("signature") && !key.includes("date")) {
      //paragraph
      // new line
      // signature image
      html += `<p class="mb-1 bg-secoundary" style="font-size:18px"><span class="font-weight-bold text-capitalize">${key.replaceAll(
        "_",
        " "
      )}&nbsp: &nbsp</span> <img src="${value}" class="img-fluid eids" /></p>`;
    } else {
      html += `<p class="mb-1 bg-secoundary" style="font-size:18px"><span class="font-weight-bold text-capitalize">${key.replaceAll(
        "_",
        " "
      )}&nbsp: &nbsp</span> ${value}</p>`;
    }
  }
  return html;
}

function ptRenderForm(data) {
  // console.log("render-form -", data)
  var form_data = data.body.Items[0].form_data;
  let form_type = data.body.Items[0].form_type;
  // let url = ""
  // if (form_type === "adult_form") {
  //   url = "../forms/adult-form.html"
  // }
  // $.ajax({
  //   url: url,
  //   async: true,
  //   success: function (data) {
  //     $("#user-report-iframe").attr("srcdoc", data)
  //     js2form("forms", form_data)
  //   },
  // })
  // // $("#user-report-iframe").attr("src", url)
  // // console.log("form Data - ", form_data)
  // // console.log($("#user-report-iframe").contents().find("form"))
  // // let form = $("#user-report-iframe").contents().find("form")[0]
  // // js2form("forms", form_data)

  return renderFilledDetails(form_data);
}

function ptShowForm(form_type, created) {
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    {
      email: sessionStorage.getItem("pt-email"),
      form_type: form_type,
      created: created,
    },
    (data) => {
      $("#user-report-data").html(ptRenderForm(data));
    }
  );
}

function ptViewFormsSection() {
  $(".sections").addClass("d-none");
  $(".sections.view-forms").removeClass("d-none");
  getResponse(
    `/users/${sessionStorage.getItem("pid")}/forms`,
    {
      email: sessionStorage.getItem("pt-email"),
    },
    (data) => {
      $("#forms-list").html("");
      data.body.Items.forEach((item) => {
        $(`<li class="previous-records action" data-action="view-form" data-form-type='${
          item.form_type
        }' data-created="${item.created}">
          <span class="d-block mb-1 text-uppercase font-weight-bold">${item.form_type.replaceAll(
            "_",
            " "
          )}</span>
          <span>${moment(item.created).format("LLL")}</span>
        </li>`).appendTo("#forms-list");
      });
    }
  );
}

function confirmAppointment(eid, pid, pt_mail, doc_mail) {
  $.showConfirm({
    title: "Appointment Confirmation",
    body: "Do you want to confirm this appointment",
    textTrue: "CONFIRM",
    textFalse: "CANCEL",
    onSubmit: function (result) {
      if (result) {
        $.ajax({
          url: `${ENDPOINT}/admin/appointments`,
          type: "PUT",
          dataType: "json",
          data: JSON.stringify({
            patient_id: pid,
            patient_email: pt_mail,
            creator_email: doc_mail,
            event_id: eid,
          }),
          async: false,
          contentType: "application/json",
        })
          .done(function (res) {
            console.log(res);
            if (res.statusCode == 200) {
              successToast("Appointment Confirmed");
            } else {
              dangerToast("Confirmation Failed");
            }
          })
          .fail(function (err) {
            console.log("error -", err);
            dangerToast("error connection to server");
          });
      }
    },
  });
}

function showInvoice(oid) {
  let eventData = getSyncResponse(`/admin/appointments?order_id=${oid}`, null);
  console.log("Invoice eventData - ", eventData);
  var htmlPage = `<html><head>${bootstrapCDN}${style}</head><body>${renderInvoice(
    eventData
  )}</body></html>`;

  $.showModal({
    title:
      "INVOICE <button class='btn btn-sm btn-primary position-absolute print' style='right:50px'>PRINT</button>",
    body: `<iframe id="printContent" name="printContent" height="500" srcdoc='${htmlPage}'></iframe>`,
  });
  var child = $("iframe#printContent").height();
  var parent = $("iframe#printContent").parent().height(500);
}

function openPatientDashboard(id, eid) {
  window.location.href = `./patient/pt-dashboard.html?pid=${id}&eid=${eid}`;
}

$(".print").on("click", function (e) {
  window.frames.printContent.print();
});

function userProfileModal(data) {
  $.showModal({ title: "USER PROFILE", body: renderUserHtml(data.data[0]) });
}
function updateUserProfile(sub, email) {
  $("#update-user-profile-modal").modal("show");
  $("form#update-user").find("input[name=sub]").val(sub);
  $("form#update-user").find("input[name=email]").val(email);
}

$("#patient-select").select2({
  // minimumInputLength: 3,
  placeholder: "Select a Patient",
  width: "75%",
  ajax: {
    delay: 250,
    url: ENDPOINT + "/admin/users",
    data: function (params) {
      var filter_name = $("#patient-filter-name").val();
      var query = {
        filter_name: filter_name,
        filter_value: params.term,
        limit: 10,
      };
      if (
        params._type === "query:append" &&
        sessionStorage.getItem("patient_select_pagination_token") != ""
      ) {
        query.PaginationToken = sessionStorage.getItem(
          "patient_select_pagination_token"
        );
        sessionStorage.setItem("patient_select_pagination_token", "");
      }

      return query;
    },
    processResults: function (data) {
      if (data.hasOwnProperty("PaginationToken")) {
        sessionStorage.setItem(
          "patient_select_pagination_token",
          data.PaginationToken
        );
      } else {
        sessionStorage.setItem("patient_select_pagination_token", "");
      }
      var items = [];
      var filter_name = $("#patient-filter-name").val();
      items.push({ id: "", text: "All" });
      data.data.forEach(function (item, index) {
        items.push({ id: item.sub, text: item[filter_name] });
      });

      return {
        results: items,
        // pagination: {
        //   more: true,
        // },
      };
    },
  },
});

$("#form-reset").on("click", function () {
  $("#patient-select").empty();
});

function findAge(birthdate) {
  return moment().diff(birthdate, "years", false);
}

function getUserFullName(attr) {
  let formData = {};
  if (attr.hasOwnProperty("email")) {
    formData.filter_name = "email";
    formData.filter_value = attr.email;
  }
  if (attr.hasOwnProperty("sub")) {
    formData.filter_name = "sub";
    formData.filter_value = attr.sub;
  }
  if (formData.filter_value == "" || formData.filter_value == null) {
    return null;
  }

  console.log("formData - ", formData);

  let userData = getSyncResponse("/admin/users", formData);
  return renderUserFullName(userData);
}

function renderUserFullName(data) {
  let fullName = `${data.given_name != null ? `${data?.given_name} ` : ""}
  ${data?.middle_name != null ? `${data?.middle_name} ` : ""}
  ${data?.family_name != null ? `${data?.family_name} ` : ""}`;
  sessionStorage.setItem("pt-fullname", fullName);
  return fullName;
}

function renderUserHtml(data) {
  var htmlContent = `<div class="row m-2 py-3 small rounded shadow">
  <div class="col-sm-auto text-center">
  <img class="w-100" src=${
    data.picture != null ? data.picture : "./assets/img/user.svg"
  } style="max-width: 100px;" />
  </div>
  <div class="col">
      <div class="row">
          <div class="col">
              <h5 class="text-capitalize mb-0 font-weight-bold">${renderUserFullName(
                data
              )}</h5>
              <p class="d-sm-block">${data.email}</p>
              <p class="mb-0"><strong>DOB</strong>:  ${
                data.birthdate != null ? data.birthdate : "-"
              }</p>
              <p class="mb-0"><strong>Age</strong>: ${
                data.birthdate != null ? findAge(data.birthdate) : "-"
              } Years</p>
          </div>
          <div class="col">
              <p class="mb-0"><strong>Nationality</strong>: ${
                data.locale != null ? data.locale : "-"
              }</p>
              <p class="mb-0"><strong>Phone</strong>: ${
                data.phone_number != null ? data.phone_number : "-"
              }</p>
              <p class="mb-0"><strong>Address</strong>: ${
                data.address != null ? data.address : "-"
              }</p>
              <p class="mb-0"><strong>Emirates ID</strong>: ${
                data.preferred_username != null ? data.preferred_username : "-"
              }</p>
              <button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="pt-dashboard" data-pid='${
                data.sub
              }'>PATIENT DASHBOARD</button>
              <button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="update-profile" data-pid=${
                data.sub
              } data-pt-email=${data.email} >EDIT PROFILE</button>
              <a class="btn btn-outline-primary btn-sm" href="#collapse-${
                data.sub
              }" role="button" aria-expanded="true" aria-controls="collapse-${
    data.sub
  }" data-toggle="collapse">View Emirates ID</a></div>
      </div>
  </div>
  <div class="col-12 collapse" id="collapse-${data.sub}">
      <div class="row mt-2">
        <div class="col-sm-12 col-md-6 text-center"><img class="img-fluid eids" src="${
          data["custom:emirates_id_front"] || "./assets/img/eidf.jpg"
        }" /></div>
        <div class="col-sm-12 col-md-6 text-center"><img class="img-fluid eids" src="${
          data["custom:emirates_id_back"] || "./assets/img/eidb.jpg"
        }" /></div>
      </div>
  </div>
</div>`;
  return htmlContent;
}

function eventTimeToString(startTime, endTime) {
  let start = moment(startTime).format("LL");
  let end = moment(endTime).format("LT");
  return `${start} - ${end}`;
}

function serviceDetails(service) {
  var text = `${
    service?.service_type != null ? `${service?.service_type} | ` : ""
  } 
  ${service?.service_amount != null ? `${service?.service_amount}` : ""}
  ${service?.service_currency != null ? `${service?.service_currency} | ` : ""}
  ${
    service?.service_duration != null
      ? `${service?.service_duration} min | `
      : ""
  }
  ${service?.service_desc != null ? `${service?.service_desc} ` : ""} 
  `;
  return text;
}

function renderAppointmentHtml(event) {
  htmlContent = `<div class="row m-1 py-3 small rounded shadow" >
    <div class="col">
        <div class="row">
            <div class="col">
                <p class="font-weight-bold mb-0" style="font-size: 1rem ">Meeting with ${
                  event?.extendedProperties?.private?.patient_email || "-"
                }</p>
                <p class="mb-2">${eventTimeToString(
                  event.start.dateTime,
                  event.end.dateTime
                )}</p>
            </div>
            <div class="col-auto">
                <p class="mb-1"><strong>File No. </strong> ${
                  event?.extendedProperties?.private?.file_no
                }</p>
            </div>
        </div>
        <p class="mb-1"><strong>Chief Complaint: </strong> ${
          event?.extendedProperties?.private?.chief_complaint || "-"
        }</p>
        <p class="mb-1"><strong>Locatio  </strong> ${event.location || "-"}</p>
        <p class="mb-1"><strong>Service Details: </strong> ${serviceDetails(
          event?.extendedProperties?.private
        )} 
        </p>`;
  if (
    event.organizer.email == event?.extendedProperties?.private?.doctor_email
  ) {
    htmlContent += `<p class="mb-0"><strong>Doctor: </strong>${
      event.organizer.displayName || event.organizer.email
    }</p>`;
  } else {
    htmlContent += `<p class="mb-0"><strong>Doctor: </strong>${
      event.organizer.email
    }</p>
                    <p class="mb-1">Created By ${
                      event.organizer.displayName || event.organizer.email
                    }</p>`;
  }

  htmlContent += `<div class="row">
                    <div class="col">
                        <p class="mb-1"><strong>Status: </strong>${event?.extendedProperties?.private?.event_status}</p>`;

  if (event?.extendedProperties?.private?.meeting_link != null) {
    htmlContent += `<p class="mb-1"><strong>Meeting: </strong><a href="${event?.extendedProperties?.private?.meeting_link}" target="_blank" >Start Meeting</a></p>`;
  }

  htmlContent += `</div>`;
  htmlContent += `  <div class="col">`;

  if (
    event?.extendedProperties?.private?.payment_ref != null &&
    event?.extendedProperties?.private?.payment_status.toLowerCase() === "paid"
  ) {
    htmlContent += `    <p class="mb-1 text-ellipsis" onclick="textEllipsis(this)"><strong>Payment Ref: </strong> ${event?.extendedProperties?.private?.payment_ref}</p>`;
  }

  if (
    event?.extendedProperties?.private?.amount != null ||
    event?.extendedProperties?.private?.payment_type != undefined
  ) {
    htmlContent += `    <p class="mb-1"><strong>Payment Type: </strong> ${event?.extendedProperties?.private?.payment_type} </p>`;
  }

  htmlContent += `   </div>`;
  htmlContent += `</div>
                <button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="profile" data-pid='${event?.extendedProperties?.private?.patient_id}'>USER PROFILE</button>`;

  if (
    event?.extendedProperties?.private?.event_status.toLowerCase() == "pending"
  ) {
    htmlContent += `<button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="confirm" data-eid='${event.id}' data-pid="${event?.extendedProperties?.private?.patient_id}" data-pt-email="${event?.extendedProperties?.private?.patient_email}" data-doc-mail="${event?.extendedProperties?.private?.cal_id}">CONFIRM</button>`;
  }

  htmlContent += `<button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="reschedule" data-eid='${event.id}'>RESCHEDULE</button>
                <button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="pt-dashboard" data-pid='${event?.extendedProperties?.private?.patient_id}' data-eid='${event.id}'>PATIENT DASHBOARD</button>`;

  if (
    event?.extendedProperties?.private?.payment_status != null &&
    event?.extendedProperties?.private?.payment_status.toLowerCase() == "paid"
  ) {
    htmlContent += `<button class="btn btn-outline-primary action btn-sm m-1" type="button" data-action="invoice" data-oid='${event?.extendedProperties?.private?.order_id}' >INVOICE</button>`;
  } else {
    htmlContent += `<button class="btn btn-outline-primary btn-sm m-1" type="button" onclick="copyPaymentLink(this)" data-data="${ENDPOINT}/payments/${event?.extendedProperties?.private?.patient_id}?event_id=${event.id}" >PAYMENT LINK <i class="fa fa-clipboard mx-2 cursor-copy" onclick="copyToClipboard(this)"></i></button>`;
  }
  if (event?.extendedProperties?.private?.zoom_start_url != null) {
    htmlContent += `<a class="btn btn-outline-primary btn-sm m-1 text-uppercase" href="${event?.extendedProperties?.private?.zoom_start_url}" target="_blank" >START MEETING</a>`;
  }
  htmlContent += `</div>
        </div>`;
  return htmlContent;
}

function getUserFullName(attr) {
  let formData = {};
  if (attr.hasOwnProperty("email")) {
    formData.filter_name = "email";
    formData.filter_value = attr.email;
  }
  if (attr.hasOwnProperty("sub")) {
    formData.filter_name = "sub";
    formData.filter_value = attr.sub;
  }

  let userData = getSyncResponse("/admin/users", formData);
  return renderUserFullName(userData);
}

function renderInvoice(event) {
  var htmlContent = `<div class="row">
                      <div class="col-12 text-center"><img src="./assets/img/araa-consultancy-and-studies-logo.png" />
                          <p class="mb-0">Experience Most Compassionate Healthcare in UAE</p>
                          <p class="mb-0">Under the</p>
                          <p class="font-weight-bold mb-5">Leadership of Dr. Ahmed Alnajjar</p>
                      </div>
                      <div class="col-12">
                          <div class="row mb-5">
                              <div class="col">
                                  <p>Name: ${getUserFullName({
                                    email:
                                      event?.extendedProperties?.private?.email,
                                  })}
                                  )}</p>
                                  <p>Email : ${
                                    event?.extendedProperties?.private?.email
                                  }</p>
                                  <p>Appointment : ${moment(
                                    event?.start?.dateTime
                                  ).format("LLL")}</p>
                                  <p>Chief Complaint :${
                                    event?.extendedProperties?.private
                                      ?.chief_complaint
                                  }</p>
                              </div>
                              <div class="col-auto">
                                  <p>File No. ${
                                    event?.extendedProperties?.private?.file_no
                                  }</p>
                                  <p>Doctor: Dr. Ahmed Alnajjar</p>
                              </div>
                          </div>
                          <div class="table-responsive">
                              <table class="table">
                                  <thead>
                                      <tr>
                                          <th>Description</th>
                                          <th>Price</th>
                                      </tr>
                                  </thead>
                                  <tbody>
                                      <tr>
                                          <td>Video Call</td>
                                          <td>${
                                            event?.extendedProperties?.private
                                              ?.service_amount
                                          } ${
    event?.extendedProperties?.private?.service_currency
  }</td>
                                      </tr>
                                  </tbody>
                                  <tfoot>
                                      <tr>
                                          <td>Total</td>
                                          <td>${
                                            event?.extendedProperties?.private
                                              ?.service_amount
                                          } ${
    event?.extendedProperties?.private?.service_currency
  }</td>
                                      </tr>
                                  </tfoot>
                              </table>
                          </div>
                      </div>
                    </div>`;
  htmlContent += `<footer class="sticky-footer w-100 text-center">
                      <p class="mb-0 font-weight-bold">Araa Consultancy and Studies</p>
                      <p class="mb-0">Unit 201, DBCS Building Al Gar houd 13866 Dubai 941, Tel: +971 -------------
--</p>
                      <p class="mb-0">Email: ahmedalnajjar@ahmedalnajjar.com web: www.ahmedalnajjar.com</p>
                  </footer>`;
  return htmlContent;
}

function renderPtDetails(data) {
  sessionStorage.setItem("pt-email", data?.email);

  htmlContent = `<div class="row">
    <div class="col-md-12 col-lg-5">
        <p class="mb-1"><strong>Patient Name: </strong>${renderUserFullName(
          data
        )}</p>
        <p class="mb-1"><strong>Patient Email: </strong> ${data?.email}</p>
        <p class="mb-1"><strong>Sex: </strong> ${
          data?.gender != null ? data?.gender : "-"
        }</p>
        <p class="mb-1"><strong>Emirates ID: </strong> ${
          data?.preferred_username != null ? data?.preferred_username : "-"
        }</p>
        <p class="mb-1"><strong>Age: </strong> ${findAge(data?.birthdate)}</p>
        <p class="mb-1"><strong>DOB: </strong> ${
          data?.birthdate != null ? data?.birthdate : "-"
        }</p>
    </div>
    <div class="col-12 col-md-8 col-lg-5">
        <p class="mb-1"><strong>Nationality: </strong>${
          data?.locale != null ? data?.locale : "-"
        }</p>
        <p class="mb-1"><strong>Patient Type</strong> -</p>
        <p class="mb-1"><strong>Mobile No: </strong>${
          data?.phone_number != null ? data?.phone_number : "-"
        }</p>
        <p class="mb-1"><strong>Start Time: </strong> - </p>
        <p class="mb-1"><strong>End Time: </strong> - </p>
    </div>
    <div class="col-sm-12 col-md-auto order-sm-1">
        <div class="w-100 text-center p-2"><img style="width: 125px;height: 125px;" src=${
          data?.picture != null ? data?.picture : "../assets/img/user.svg"
        } /></div>
    </div>
</div>`;
  return htmlContent;
}

function regexGetBodyContent(str) {
  var bodyTags = str.match(/<form.*?>([\s\S]*)<\/form>/gim);
  console.log("bodytag - ", bodyTags);
  // var bodyTags = str.match(/<\/*body[^>]*>/gim)
  // returns an array
  // bodyTags[0] is body open, bodyTags[1] is body close
  // unless someone output the markup backwards :)
  // bodyContents = str.slice(bodyTags[0].length, -bodyTags[1].length)
  bodyContents = bodyTags[0];
  return bodyContents; // use as innerHTML of <body>
}

let surveyData = "";
function drawChart(survey) {
  console.log(survey);
  surveyData = survey;
  const SCALE_RANGE = 5;
  var filledQuestions = {};
  let labels = [];
  let data = [];
  if (survey != null) {
    $.each(survey.sections, function (index, section) {
      let block =
        section.totalQuestions / (section.totalQuestions * SCALE_RANGE);
      let sum = 0;
      $.each(section.questions, function (index2, question) {
        sum += question.value * block;
        filledQuestions[question.en] = question.value;
      });
      let percent = (sum * 100) / section.totalQuestions;
      if (section.sectionType === "scale") {
        labels.push(section.title.en);
        data.push(parseFloat(percent.toFixed(1)));
      }
    });
    updateChart(labels, data);
  }
  if (!jQuery.isEmptyObject(survey)) {
    $("#check-list-graph").removeClass("d-none");
  }
  if (!jQuery.isEmptyObject(filledQuestions)) {
    fillSurvey(filledQuestions);
  }
}

function updateChart(labels, data) {
  let user_report_chart = document.querySelector("#user-report-chart canvas")
    .chart;
  user_report_chart.data.labels = labels;
  user_report_chart.data.datasets[0].data = data;
  user_report_chart.update();
}

function fillSurvey(data) {
  $("#user-report-questions").removeClass("d-none");
  $("#filledSurvey").html(surveyContent);
  showTab(currentTab);
  js2form(document.getElementById("filledSurvey"), data);
}

$(window).resize(function () {
  if (document.querySelector("#user-report-chart canvas").chart != null) {
    drawChart(surveyData);
  }
});

function textEllipsis(obj) {
  console.log($(obj).hasClass("text-ellipsis"));
  $(obj).hasClass("text-ellipsis")
    ? $(obj).removeClass("text-ellipsis")
    : $(obj).addClass("text-ellipsis");
}

function copyPaymentLink(obj) {
  console.log($(obj).data("data"));
  var input = document.body.appendChild(document.createElement("input"));
  input.value = $(obj).data("data");
  input.focus();
  input.select();
  document.execCommand("copy");
  input.parentNode.removeChild(input);
}

function processFormData(node) {
  /**
   * transform date_time to ISO timestamp
   */
  // if (node.name && node.name.match(/date_time/)) {
  //   console.log(node.name, node.value);
  //   if (!node.value) {
  //     return { name: node.name };
  //   }
  //   return { name: node.name, value: new Date(node.value).toISOString() };
  // }
  // if (node.name && node.name.match(/phone_number/)) {
  //   console.log("phone number", node.name, node.value);
  //   if (!node.value) {
  //     return { name: node.name };
  //   }
  //   let dialCode = $(".tel-phone-input").intlTelInput("getSelectedCountryData")
  //     .dialCode;
  //   return {
  //     name: node.name,
  //     value: `${dialCode} ${node.value}`,
  //   };
  // }
}

function removeSpecialCharactersAndSpaces(string) {
  return string.replaceAll(" ", "").replaceAll("&", "").replaceAll("-", "");
}

function inputToParagraph(node) {
  // create a new <p> element
  new_element = $("<p>");
  // iterate over every attribute of the #some_id span element
  $.each($(node).get(0).attributes, function (i, attrib) {
    // set each attribute to the specific value
    $(new_element).attr(attrib.name, attrib.value);
  });
  // carry over the html content
  new_element.html($(node).html());
  // new_element.classList.add("m-0")
  // finally, swap the elements
  $(node).replaceWith(new_element);
}

function getResponse(link, formData, callback) {
  $.ajax({
    url: CORS + ENDPOINT + link,
    type: "get",
    dataType: "json",
    data: formData,
    contentType: "application/json",
  })
    .done((res) => {
      callback(res);
    })
    .fail((error) => {
      console.log("error -", error);
    });
  // .always(function (result) {})
}

function postResponse(link, formData, callback) {
  $.ajax({
    url: CORS + ENDPOINT + link,
    type: "POST",
    dataType: "json",
    data: JSON.stringify(formData),
    contentType: "application/json",
    processing: false,
  })
    .done((res) => {
      callback(res);
    })
    .fail((error) => {
      console.log("error -", error);
    });
  // .always((result) => {})
}

function asyncResponse(method, link, formData, callback) {
  const METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE"];
  if (!METHODS.includes(method.toUpperCase())) {
    console.log("Invalid method parameter");
    return null;
  }

  $.ajax({
    url: CORS + ENDPOINT + link,
    type: method,
    dataType: "json",
    data: JSON.stringify(formData),
    contentType: "application/json",
    processing: false,
  })
    .done((res) => {
      callback(res);
    })
    .fail((error) => {
      console.log("error -", error);
    });
  // .always((result) => {})
}

function getSyncResponse(link, formData) {
  let response;
  $.ajax({
    url: CORS + ENDPOINT + link,
    type: "GET",
    data: formData,
    async: false,
    contentType: "application/json",
    success: function (res) {
      console.log("sync data", res);
      return res;
    },
  })
    // .done((res) => {
    //   console.log("sync data", res);
    //   response = res;
    // })
    .fail((err) => {
      console.log("error -", err);
      dangerToast("Error Connecting to Server");
    });
  // .always((result) => {})
  return response;
}
const croppieOptions = {
  viewport: {
    width: 300,
    height: 300,
  },
  boundary: {
    width: "100%",
    height: "400",
  },
  enableResize: true,
  showZoomer: true,
  enableOrientation: true,
  mouseWheelZoom: "ctrl",
};
// var eidf = $("#emirates_id_front_preview");
// eidf.croppie(croppieOptions);
// var eidb = $("#emirates_id_back_preview");
// eidb.croppie(croppieOptions);
$(".image-cropper").croppie(croppieOptions);

$(".image-file-edit").on("change", function (e) {
  cropImage = $(this).data("preview");
  var selected_file_name = $(this).val();
  if (selected_file_name.length > 0) {
    /* Some file selected */
    var reader = new FileReader();
    reader.onload = function (e) {
      //show editing buttons
      //set viewport & boundary
      $(`#${cropImage}`).croppie("bind", {
        url: e.target.result,
      });
    };
    reader.readAsDataURL(this.files[0]);
  }
});

$(".image-rotate-left,.image-rotate-right").on("click", function (e) {
  $(`#${$(this).parent().parent().attr("id")}`).croppie(
    "rotate",
    parseInt($(this).data("deg"))
  );
});

$(".image-flip-vertical").on("click", function () {
  $(`#${$(this).parent().parent().attr("id")}`).croppie("bind", {
    orientation: 4,
  });
});

$(".image-flip-horizontal").on("click", function () {
  $(`#${$(this).parent().parent().attr("id")}`).croppie("bind", {
    orientation: 2,
  });
});

// Invoice consultattion on checked
// if ($(this).find("input").prop("checked")) {
//   $(".consultation-type").css("display", "block");
// } else {
//   $(".consultation-type").css("display", "none");
// }

$(".invoiceInputChange").on("change", function (e) {
  const TAX_RATE = 5;
  let formData = form2js("invoice", ".", true, null);
  // console.log(formData);
  let total = 0;
  $.each(formData.service_type, function (index, item) {
    console.log("item - ", item);
    console.log(
      `formData.service[${item}].amount- ${formData.service[item].amount}`
    );
    let amount = parseInt(formData.service[item].amount) || 0;
    let quantity = parseInt(formData.service[item].quantity) || 1;
    let tax = amount * quantity * (TAX_RATE / 100);
    console.log("tax", tax);
    formData.service[item].tax = tax.toFixed(2);
    total += amount + tax;
    formData.total = total + " AED";
    formData.total_text = numToWords(total);
    console.log("newData - ", formData);
    js2form("invoice", formData);
  });
});

function numToWords(num) {
  var a = [
    "",
    "one ",
    "two ",
    "three ",
    "four ",
    "five ",
    "six ",
    "seven ",
    "eight ",
    "nine ",
    "ten ",
    "eleven ",
    "twelve ",
    "thirteen ",
    "fourteen ",
    "fifteen ",
    "sixteen ",
    "seventeen ",
    "eighteen ",
    "nineteen ",
  ];
  var b = [
    "",
    "",
    "twenty",
    "thirty",
    "forty",
    "fifty",
    "sixty",
    "seventy",
    "eighty",
    "ninety",
  ];
  if ((num = num.toString()).length > 9) return "overflow";
  n = ("000000000" + num)
    .substr(-9)
    .match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
  if (!n) return;
  var str = "";
  str +=
    n[1] != 0
      ? (a[Number(n[1])] || b[n[1][0]] + " " + a[n[1][1]]) + "crore "
      : "";
  str +=
    n[2] != 0
      ? (a[Number(n[2])] || b[n[2][0]] + " " + a[n[2][1]]) + "lakh "
      : "";
  str +=
    n[3] != 0
      ? (a[Number(n[3])] || b[n[3][0]] + " " + a[n[3][1]]) + "thousand "
      : "";
  str +=
    n[4] != 0
      ? (a[Number(n[4])] || b[n[4][0]] + " " + a[n[4][1]]) + "hundred "
      : "";
  str +=
    n[5] != 0
      ? (str != "" ? "and " : "") +
        (a[Number(n[5])] || b[n[5][0]] + " " + a[n[5][1]]) +
        "only "
      : "";
  return str;
}
